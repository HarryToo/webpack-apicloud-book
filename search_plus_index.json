{"./":{"url":"./","title":"说明","keywords":"","body":"webpack-apicloud 放弃jQuery式开发，方便一点、清晰一点 为什么做 之前项目前端交互方式主要依靠jQuery，逻辑状态复杂时dom操作反复繁琐，维护不便 之前项目编码风格完全基于es5，代码冗长不够简练，眼看es6+很多很好的新特性却不能适用于项目中 之前项目结构陈旧，加上项目的反复迭代变更，仅有的common.js在各种花样填充下，各个功能封装和代码复用方式越发显得凌乱 之前项目开发阶段真机调试略显麻烦，每次改动页面样式或js代码，需要重新同步后再重新操作跳转至当前页面才能观察效果 抛砖引玉，个人觉得重要的不是多牛多新潮的技术栈，而是都能朝着某个标准、秉着某种细致的开发态度去做 也当作是个人练习，也许你有更新更好的技术栈推荐，但至少这也是一种不贵的选择，做不做在我，用不用在你 做了什么 根据实际开发情况，在APICloud项目基础上，加入基本的webpack构建方式，动态entry，各环境的配置及相关模块的解析处理 对于js，使用Babel+Polyfill编译；对于样式编写及适配，引入Sass及Postcss处理器 放弃jQuery，各方面考量下选择了引用客户端环境的Vue.js，处理了方法及Vue实例等变量导出及使用方式 个别问题的试探和处理，如点击延时、Vue中tapmode使用方案、图片引用和打包构建方式、文件和项目基本结构设计等 参照以往项目情况，完成了一些基本的变量、方法、组件和指令的封装，各环境配置构建及优化整理，demo编写及测试 有什么用 开发环境启用HMR，js和样式等依赖文件修改自动热更新，免去每次修改需重新同步再在手机上操作后才能预览效果 html统一由HtmlWebpackPlugin进行模板处理，无需关心html文件头尾部代码和基本静态资源的引用 Sass预处理器节省样式代码，Postcss实现自动补全浏览器兼容样式和px转rem以处理适配问题 Vue.js代替jQuery来处理交互及模板渲染更加友好，其组件特性和模块化也更方便地随时进行可复用性的vue组件封装，不必每次重复造轮子 使用webpack打包带来环境变量的优点，配置好开发/生产环境接口域名，打包前后不必手动反复切换，减少出错 为项目带来更好的模块化管理方式、更快捷优雅的es6+编码风格和更多可用的npm依赖 "},"files.html":{"url":"files.html","title":"结构","keywords":"","body":"结构 主要文件目录 |-- build webpack打包配置文件夹 | |-- .babelrc babel配置文件 | |-- postcss.config.js postcss配置文件 | |-- webpack.common.js 基础构建配置文件 | |-- webpack.dev.js 开发环境构建配置文件 | |-- webpack.prod.js 生产环境构建配置文件 |-- dist 打包输出文件夹 |-- icon 应用图标（APICloud 本地测试版本使用） |-- launch 启动图片（APICloud 本地测试版本使用） |-- node_modules 依赖仓库 |-- src 源码主文件夹 | |-- assets 一些需要经过打包构建的封装资源 | | |-- app.js 基于api或基本业务方法封装 | | |-- util.js 工具方法和vue指令等 | |-- components vue可复用性组件 | |-- config 接口域名和api请求配置 | | |-- config.js 开发、生产环境相关接口域名等配置 | | |-- req.js 各种api请求管理配置 | |-- views 页面视图文件（html、scss、图片） | | |-- about 视图模块 | | | |-- about.html | | | |-- about.js | | | |-- about.scss | | | |-- about.png | |-- index.html app入口html | |-- index.js app入口js |-- static js、css、font等可直接引用的静态资源 |-- .syncignore 同步忽略配置文件 |-- config.xml |-- package.json 整理建议 src/assets/app.js 建议统一存放基于api封装的基本方法和复用性业务方法（如登陆拦截），app已导出为全局变量，方便直接通过app.fun()方式调用 src/assets/util.js 建议存放工具方法，自定义指令以及vue模板 src/components 建议放置编写的vue组件，可分为基础组件（如按钮、表单等基本元素）、复用性业务模块组件（如某列表功能块）两大类 src/views 存放主要视图模块，建议严格按照模块层级整理目录，用文件夹隔离模块页面各自的html、js、scss及图片，参考上图 建议git仓库存放开发环境代码方便管理分支及版本，项目上线时，经webapck构建后dist文件夹下的文件还是提交原APICloud平台的svn通道进行应用打包，你可以在本地建立dev和prod两个工作区已分别存放开发（git）和生产环境（svn）代码 "},"use.html":{"url":"use.html","title":"使用","keywords":"","body":"使用 前置 Node.js环境、npm/cnpm （可选）安装apicloud-cli —— apicloud官方提供的基于node的wifi同步命令工具 步骤 安装项目基础依赖npm i 修改config.xml的入口html地址 执行npm run server启动开发环境服务，wifi同步一次 愉快的 coding 阶段 😑... 执行npm run build开始生产环境打包构建 修改dist/config.xml的入口html地址 NPM scripts script 说明 wifiStart 启动wifi同步服务 wifiStop 关闭wifi同步服务 wifiLog 启动wifi日志服务 update wifi增量同步 updateAll wifi全量同步 server 启动本地开发环境服务 build 生产打包构建 注意 HMR热更新机制只适用于entry相依赖的文件，修改html模板和static文件夹下静态资源无法触发自更新，针对此问题，在开发环境下页面有提供刷新按钮，尽管如此，同样比真机同步来的快捷 启动开发环境服务或者执行生产环境构建时，请务必确保对config.xml中入口文件地址作了对应的修改，另外openWin方法的url确保都使用了app.resolvePath()① 方式解析 由于src下html属于模板，会交由html-webpack-plugin插件构建处理，其中的img-src地址需采用ejs模板语法，图片也必须当作模块引入，eg：\" > 图片打包构建方式暂一律采用转换为base64，原因是开发和生产环境需要的publicPath不一致，而生产环境下安卓设备无法采用如widget://xx.npg的绝对路径方式引用图片等资源，好在项目为多页面，同一页面引用图片资源并不多，所以此方式也影响不大 由于集成的vue为客户端环境版本，开发时务必注意使用的自定义组件及prop等名称单词的大小写，eg: ①. app.resolvePath() 方法维持页面在server或build环境下的跳转关联 ↩ "},"doc/app.html":{"url":"doc/app.html","title":"app.js","keywords":"","body":"app.js resolvePath(url) 根据开发/生产环境解析页面文件绝对路径 返回值类型: String url 类型 默认值 说明 String - 页面相对src/views/下路径 示例: // 打开页面：src/views/about/about.html api.openWin({ name: 'about', url: app.resolvePath('about') }); toast(msg) 文字消息提示框，api.toast()封装 msg 类型 默认值 说明 String - 提示消息文字 示例: app.toast('hello!'); alert(option) dialogBox弹窗模块封装 option 字段 类型 默认值 说明 title String '提示' 标题文字 content String '内容' 内容文字 btn Array ['确定', '取消'] 按钮文字数组 btnColor Array ['#FF8E3C', '#999'] 按钮颜色数组 cb Array - 回调函数数组 示例: app.alert({ title: '提示', content: '弹窗内容', btn: ['确定', '取消'], btnColor: ['#FF8E3C', '#999'], cb: [ function () { app.toast('点击确定'); }, function () { app.toast('点击取消'); } ] }) picker(option) UIActionSelector选择器模块封装 option 字段 类型 默认值 说明 name String - （可选）选择器命名空间，页面存在多个选择器时充当作用域 data Array - 选项数组，元素可为String或Number或{name, value} active Number 0 选中项下标（建议用indexOf方式，每次选择就是从当前项开始了） cb Function - 回调函数，回调参数为选择结果{name, value}格式对象 示例: let arr = ['选项1', '选项2', '选项3']; let val = '选项1'; app.picker({ name: 'picker_one', data: arr, active: arr.indexOf(val), cb: function (res) { val = res.value; } }); "},"doc/components.html":{"url":"doc/components.html","title":"vue组件","keywords":"","body":"vue组件 AppHeader 页面标题栏（注意需要fixStatusBar(header)） slot slot名 说明 匿名 标题栏title menu 标题栏右侧菜单按钮 prop 参数名 类型 默认值 说明 back Boolean true 是否显示返回按钮 color String '#333' 标题栏字体颜色 bg String '#fff' 标题栏背景色/图片 border Boolean true 是否显示下边线 示例: 我的 ) no-repeat top/cover\" color=\"#fff\" :border=\"false\">关于 import {AppHeader} from '@/components/basic' export default { apiready() { let header = $api.dom('header'); if (header) { $api.fixStatusBar(header); } }, vm: new Vue({ components: { AppHeader }, methods: { menuHandle(){ app.toast('点击标题栏菜单按钮'); } } }) } AppBody 页面主内容区域，better-scroll实现 slot slot名 说明 匿名 内容区域 prop 参数名 类型 默认值 说明 pulldown Boolean false 是否开启下拉刷新 pullup Boolean false 是否开启上滑触底加载 event 事件名 说明 pulldown 下拉刷新 pullup 上滑加载 示例: 首页 内容... AppBanner 轮播banner，better-scroll实现 slot slot名 说明 匿名 轮播slide列表区域 prop 参数名 类型 默认值 说明 auto-play Boolean true 是否开启上滑触底加载 show-dot Boolean true 是否自动轮播 loop Boolean true 是否首尾相接循环 interval Number 2500 轮播间隔时长（ms） 示例: \" alt=\"\"> \" alt=\"\"> "},"doc/directive.html":{"url":"doc/directive.html","title":"vue指令","keywords":"","body":"vue指令 v-cache 图片缓存（只在生产环境下生效），指令绑定值为图片网络地址 示例: {{item.title}} "}}